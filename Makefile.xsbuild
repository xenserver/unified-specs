# mock is in both /usr/sbin and /usr/bin, but it is the version in /usr/bin that should 
# executed. The build system has /usr/sbin first in the path which leads to permission
# problems.

USE_BRANDING := yes
IMPORT_BRANDING := yes
# makefile for xen component in build system
include $(B_BASE)/common.mk
include $(B_BASE)/rpmbuild.mk

PATH:=/usr/bin:$(PATH)
FETCH_EXTRA_FLAGS=--mirror file:///distfiles/ocaml2

.PHONY: buildrpms build $(MY_OUTPUT_DIR)/xen.inc

build: buildrpms /output/unified/SOURCES/MANIFEST $(BRANDING) $(MY_OUTPUT_DIR)/xen.inc $(MY_OUTPUT_DIR)/kernel.inc

/output/unified/SOURCES/MANIFEST: buildrpms
	mkdir /output/unified/SOURCES
	for i in $(shell /bin/ls -1 SRPMS/*.rpm); do \
		path=$${i}; \
		echo -n "unified "; \
		rpm --qf %{License} -qp $${path} | sed -e 's/ /_/g'; \
		echo " file $${path}"; \
	done > /tmp/MANIFEST
	mv -f /tmp/MANIFEST $@

buildrpms:
	make -f Makefile
	cp -r _build/RPMS /output/unified/
	rm -rf /output/unified/RPMS/x86_64/*.src.rpm
	rm -rf /output/unified/RPMS/repodata
	cp -r _build/SRPMS /output/unified/

#
# Xen metadata for later phases
#

XEN_REPO_NAME := xen-4.6
IPXE_REPO_NAME := ipxe
KERNEL_REPO_NAME := linux-3.x

$(eval $(shell $(call git_cset_number,$(XEN_REPO_NAME)))) # Defines CSET_NUMBER for us
XEN_VERSION := $(shell $(MAKE) -C $(call git_loc,$(XEN_REPO_NAME)) --no-print-directory xenversion)
XEN_RELEASE := $(PLATFORM_VERSION).$(CSET_NUMBER)

KERNEL_PKG_VERSION = $(KERNEL_VERSION).$(KERNEL_PATCHLEVEL).$(KERNEL_STABLE_SUBLEVEL)

HYPERVISOR_OUTPUT_RPM := xen-hypervisor-$(XEN_VERSION)-*.$(DOMAIN0_ARCH_OPTIMIZED).rpm
KERNEL_OUTPUT_RPM = kernel-$(KERNEL_PKG_VERSION)-*.$(DOMAIN0_ARCH_OPTIMIZED).rpm
KERNEL_OUTPUT_DEBUG_RPM = kernel-debuginfo-$(KERNEL_PKG_VERSION)-*.$(DOMAIN0_ARCH_OPTIMIZED).rpm

ifeq ($(BUILD_NUMBER),0x)
XEN_VENDORVERSION := -xs-local
else
XEN_VENDORVERSION := -xs$(shell echo $(BUILD_NUMBER) | tr -dc [:digit:])
endif

XEN_REPO_LOC := $(call git_loc,$(XEN_REPO_NAME))
BASE_CSET_STR := $(shell { git rev-parse --verify --short=12 qparent --git-dir=$(XEN_REPO_LOC)/.git; } )
PQ_CSET_STR   := $(shell { git rev-parse --verify --short=12 HEAD    --git-dir=$(XEN_REPO_LOC)/.git/patches/.git; } )

XEN_CHANGESET := "$(BASE_CSET_STR), pq $(PQ_CSET_STR)"

.PHONY: $(MY_OUTPUT_DIR)/xen.inc
$(MY_OUTPUT_DIR)/xen.inc: $(MY_OUTPUT_DIRSTAMP) buildrpms
	{ set -e; set -o pipefail; \
	$(Q){ echo XEN_PKG_NAME := xen; \
	  echo XEN_PKG_VERSION := $(XEN_VERSION)-$(XEN_RELEASE); \
	  echo XEN_PKG_ARCH := $(DOMAIN0_ARCH_OPTIMIZED); \
	  echo XEN_PKG_FILE := RPMS/$(DOMAIN0_ARCH_OPTIMIZED)/$(HYPERVISOR_OUTPUT_RPM); \
	  echo XEN_VERSION := $(XEN_VERSION); \
	} > $@.tmp; \
	mv -f $@.tmp $@; \
	}

#
# Kernel metadata for later phases
#

include $(MY_OBJ_DIR)/pvops_version.inc
$(MY_OBJ_DIR)/pvops_version.inc: $(REPOSTAMP)
	$(call version-makefile) > $@
	awk '/(^VERSION)|(^PATCHLEVEL)|(^SUBLEVEL)|(^EXTRAVERSION)|(^STABLE_SUBLEVEL)/ { print "KERNEL_"$$_ }' ../linux-3.x/Makefile >> $@
	echo LINUX_KABI_VERSION := '$$(KERNEL_VERSION).$$(KERNEL_PATCHLEVEL).$$(KERNEL_SUBLEVEL)$$(KERNEL_EXTRAVERSION)' >> $@
	$(call git_cset_number,$(KERNEL_REPO_NAME)) >> $@
	echo XS_RELEASE := '$$(CSET_NUMBER)' >> $@


$(MY_OUTPUT_DIR)/kernel.inc: $(MY_OUTPUT_DIR)/.dirstamp buildrpms
	( echo KERNEL_PKG_NAME := kernel-$(LINUX_KABI_VERSION) ;\
	  echo KERNEL_PKG_VERSION := $(KERNEL_PKG_VERSION) ;\
	  echo KERNEL_PKG_ARCH := $(DOMAIN0_ARCH_OPTIMIZED) ;\
	  echo KERNEL_PKG_FILE := RPMS/$(DOMAIN0_ARCH_OPTIMIZED)/$(KERNEL_OUTPUT_RPM) ;\
	  echo KERNEL_DEBUGINFO_PKG_FILE := RPMS/$(DOMAIN0_ARCH_OPTIMIZED)/$(KERNEL_OUTPUT_DEBUG_RPM) ;\
	  echo LINUX_KABI_VERSION := $(LINUX_KABI_VERSION) ;\
	) >$@

.PHONY: $(BRANDING)
$(BRANDING): $(MY_OUTPUT_DIR)/.dirstamp
	{ set -e; set -o pipefail; \
	$(Q)echo "XEN_VERSION := $(XEN_VERSION)" > $@.tmp; \
	$(Q)echo KERNEL_VERSION := $(KERNEL_PKG_VERSION) >> $@.tmp; \
	$(Q)echo LINUX_KABI_VERSION := $(LINUX_KABI_VERSION) >>$@.tmp; \
	mv -f $@.tmp $@; \
	}

